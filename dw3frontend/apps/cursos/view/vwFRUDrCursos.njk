{% extends "templates/base.html" %}

{% block content %}
<div x-data="cursoForm()">
  <ol class="breadcrumb mb-2">
    <li class="breadcrumb-item active">{{ title | safe }}</li>
  </ol>
  <div class="row">
    <div class="col-12">

      <div class="card-header">
        {{ title | safe }}
      </div>

      <div class="card-body">
        <div class="">
          <form>

            <div class="col-md-3">
              <div class="form-group">
                <label for="codigo">Código</label>
                <input type="text" class="form-control" id="codigo" x-model="form.codigo" x-bind:disabled="disabled">
              </div>
            </div>

            <div class="form-group col-md-6">
              <label for="descricao">Descrição</label>
              <input type="text" class="form-control" id="descricao" x-model="form.descricao" x-bind:disabled="disabled">
            </div>

            <div class="form-group">
              <label for="ativo">Ativo</label>
              <select class="form-select" id="ativo" x-model="form.ativo" x-bind:disabled="disabled">
                <option value="true">Sim</option>
                <option value="false">Não</option>
              </select>
            </div>

            <button type="button" @click="updateForm()" x-show="!disabled" class="btn btn-primary mt-4">Salvar</button>
            <button type="button" @click="deleteForm()" x-show="!disabled" class="btn btn-danger mt-4">Excluir Curso</button>
            <a href="/cursos/manutCursos" class="btn btn-info mt-4 ml-2" role="button" aria-disabled="true">Retornar</a>
          </form>

          <div class="mt-3">
            <template x-if="message">
              <div :class="messageClass" x-text="message"></div>
            </template>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    window.onload = function () {
      windowOnLoad();

      const localErro = "{{ erro | safe }}";
      if (localErro != "") {
        alert("[vwCursos|onload] Servidor retornou o erro: " + localErro);
      }
      $("#cursoid").focus();
    };

    function cursoForm() {
      return {
        form: {
          cursoid: "{{ data.cursoid | safe }}",
          codigo: "{{ data.codigo | safe }}",
          descricao: "{{ data.descricao | safe }}",
          ativo: {{ data.ativo | safe }} // Mantenha como booleano
        },
        message: '',
        messageClass: '',
        disabled: {{ disabled }},

        async updateForm() {
          try {
            console.log("Dados a serem enviados:", this.form); // Verifique os dados
            const response = await fetch('/cursos/UpdateCursos', {
              method: 'POST',
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify(this.form)
            });

            const result = await response.json();
            if (result.status == "ok") {
              alert("Curso atualizado com sucesso");
            } else {
              const errorData = result.status;
              this.message = `Erro! Não foi possível atualizar os dados do curso devido ao erro: ${errorData}`;
              this.messageClass = 'alert alert-danger';
            }
          } catch (error) {
            this.message = `Erro de conexão: ${error.message}`;
            this.messageClass = 'alert alert-danger';
          }
        },

        async deleteForm() {
          try {
            const response = await fetch('/cursos/DeleteCursos', {
              method: 'POST',
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ cursoid: this.form.cursoid })
            });

            const result = await response.json();
            if (result.status == "ok") {
              alert("Curso excluído com sucesso");
              window.location.href = "/cursos/manutCursos";
            } else {
              const errorData = result.status;
              this.message = `Erro! Não foi possível excluir o curso devido ao erro: ${errorData}`;
              this.messageClass = 'alert alert-danger';
            }
          } catch (error) {
            this.message = `Erro de conexão: ${error.message}`;
            this.messageClass = 'alert alert-danger';
          }
        },

        resetForm() {
          this.form = {
            cursoid: '',
            codigo: '',
            descricao: '',
            ativo: true // Padrão para ativo
          };
          this.message = '';
        }
      };
    }
  </script>
{% endblock %}
